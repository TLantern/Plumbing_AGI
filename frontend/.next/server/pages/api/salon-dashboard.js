"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/salon-dashboard";
exports.ids = ["pages/api/salon-dashboard"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsalon-dashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsalon-dashboard.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsalon-dashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsalon-dashboard.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_salon_dashboard_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages/api/salon-dashboard.ts */ \"(api-node)/./pages/api/salon-dashboard.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_salon_dashboard_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_salon_dashboard_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/salon-dashboard\",\n        pathname: \"/api/salon-dashboard\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_salon_dashboard_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/salon-dashboard\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: undefined,\n                multiZoneDraftMode: Boolean(\"false\"),\n                trustHostHeader: undefined,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/salon-dashboard\",\n                projectDir:  false || '',\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsalon-dashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsalon-dashboard.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/salon-dashboard.ts":
/*!**************************************!*\
  !*** ./pages/api/salon-dashboard.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n// Global variable to track last log positions\nlet logPositions = {};\n// Function to read recent log entries\nfunction getRecentLogs(logFile, maxLines = 50) {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(logFile)) {\n            return [];\n        }\n        const content = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(logFile, 'utf8');\n        const lines = content.split('\\n').filter((line)=>line.trim());\n        return lines.slice(-maxLines);\n    } catch (error) {\n        console.error(`Error reading log file ${logFile}:`, error);\n        return [];\n    }\n}\n// Function to get new log entries since last check\nfunction getNewLogs(logFile) {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(logFile)) {\n            return [];\n        }\n        const stats = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(logFile);\n        const currentSize = stats.size;\n        const lastPosition = logPositions[logFile] || 0;\n        if (currentSize < lastPosition) {\n            // File was rotated, start from beginning\n            logPositions[logFile] = 0;\n            return getRecentLogs(logFile, 20);\n        }\n        if (currentSize === lastPosition) {\n            return []; // No new content\n        }\n        // Read the new content synchronously\n        const newContent = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(logFile, 'utf8').slice(lastPosition);\n        logPositions[logFile] = currentSize;\n        return newContent.split('\\n').filter((line)=>line.trim());\n    } catch (error) {\n        console.error(`Error reading new logs from ${logFile}:`, error);\n        return [];\n    }\n}\n// Function to parse call events from logs\nfunction parseCallEvents(logLines) {\n    const callEvents = [];\n    for (const line of logLines){\n        if (line.includes('CALL_EVENT') || line.includes('📞')) {\n            try {\n                // Extract call information from log line\n                const timestampMatch = line.match(/(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})/);\n                const callSidMatch = line.match(/Call ([A-Za-z0-9_]+)/);\n                const eventMatch = line.match(/\\[([A-Z_]+)\\]/);\n                if (timestampMatch && callSidMatch) {\n                    callEvents.push({\n                        timestamp: timestampMatch[1],\n                        call_sid: callSidMatch[1],\n                        event_type: eventMatch ? eventMatch[1] : 'UNKNOWN',\n                        message: line.trim()\n                    });\n                }\n            } catch (error) {\n                continue;\n            }\n        }\n    }\n    return callEvents;\n}\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        // Get salon analytics service URL from environment or default\n        const salonServiceUrl = process.env.SALON_SERVICE_URL || 'http://localhost:5002';\n        // Fetch dashboard data from salon analytics service\n        const response = await fetch(`${salonServiceUrl}/salon/dashboard`);\n        let dashboardData;\n        if (!response.ok) {\n            // Throw error for any bad status codes\n            throw new Error(`Salon service returned ${response.status}: ${response.statusText}`);\n        } else {\n            dashboardData = await response.json();\n        }\n        // Get real-time log data\n        const logFiles = [\n            'logs/salon_calls_realtime.log',\n            'logs/salon_phone.log'\n        ];\n        const recentLogs = [];\n        const callEvents = [];\n        try {\n            for (const logFile of logFiles){\n                const logPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), '..', logFile);\n                const newLogs = getNewLogs(logPath);\n                recentLogs.push(...newLogs);\n                callEvents.push(...parseCallEvents(newLogs));\n            }\n        } catch (logError) {\n            console.warn('Failed to read log files:', logError);\n        // Continue without log data rather than failing the entire request\n        }\n        // Add real-time data to dashboard\n        const enhancedData = {\n            ...dashboardData,\n            real_time: {\n                last_updated: new Date().toISOString(),\n                recent_call_events: callEvents.slice(-10),\n                log_activity: recentLogs.length > 0,\n                active_logs: recentLogs.slice(-5) // Last 5 log entries\n            }\n        };\n        return res.status(200).json(enhancedData);\n    } catch (error) {\n        console.error('Failed to fetch salon dashboard data:', error);\n        // Throw error instead of returning mock data\n        return res.status(500).json({\n            error: 'Failed to fetch salon dashboard data',\n            details: error instanceof Error ? error.message : 'Unknown error'\n        });\n    }\n}\nfunction getMockSalonData() {\n    const now = new Date();\n    const weekStart = new Date(now);\n    weekStart.setDate(now.getDate() - now.getDay()); // Start of current week\n    return {\n        current_week: {\n            week_start: weekStart.toISOString(),\n            call_metrics: {\n                total_calls: 15,\n                answered_calls: 12,\n                missed_calls: 3,\n                after_hours_calls: 2,\n                average_call_duration: 185,\n                conversion_rate: 75.0\n            },\n            appointment_metrics: {\n                total_appointments: 9,\n                completed_appointments: 7,\n                no_shows: 1,\n                cancellations: 1,\n                no_show_rate: 11.1,\n                cancellation_rate: 11.1,\n                average_revenue_per_appointment: 85.0,\n                total_revenue: 595.0\n            },\n            growth_rate: 12.5,\n            new_customers: 3,\n            returning_customers: 6\n        },\n        active_calls: 0,\n        recent_calls: [\n            {\n                call_sid: 'call_001',\n                phone_number: '+1234567890',\n                direction: 'inbound',\n                start_time: new Date(Date.now() - 3600000).toISOString(),\n                answered: true,\n                after_hours: false\n            },\n            {\n                call_sid: 'call_002',\n                phone_number: '+1234567891',\n                direction: 'inbound',\n                start_time: new Date(Date.now() - 7200000).toISOString(),\n                answered: false,\n                after_hours: true\n            }\n        ],\n        growth_insights: {\n            revenue_growth_4_week: 15.8,\n            appointment_growth_4_week: 22.5,\n            avg_no_show_rate: 8.5,\n            avg_conversion_rate: 72.3,\n            insights: [\n                'Excellent revenue growth of 15.8% over the last 4 weeks',\n                'High call-to-appointment conversion rate indicates effective booking process',\n                'Low no-show rate shows good customer commitment'\n            ],\n            recommendations: [\n                'Consider extending hours to capture after-hours demand',\n                'Implement loyalty program to maintain growth momentum',\n                'Add online booking to reduce phone volume during peak hours'\n            ],\n            current_week: {\n                total_calls: 15,\n                appointments: 9,\n                revenue: 595.0,\n                avg_revenue_per_appointment: 85.0\n            }\n        },\n        timestamp: new Date().toISOString()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/salon-dashboard.ts\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsalon-dashboard&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsalon-dashboard.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();